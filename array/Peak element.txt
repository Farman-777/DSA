question 1:
An element is called a peak element if its value is not smaller than the value of its adjacent elements(if they exists).
Given an array arr[] of size N, Return the index of any one of its peak elements.
Note: The generated output will always be 1 if the index that you return is correct. Otherwise output will be 0. 


Example 1:

Input: 
N = 3
arr[] = {1,2,3}
Possible Answer: 2
Generated Output: 1
Explanation: index 2 is 3.
It is the peak element as it is 
greater than its neighbour 2.
If 2 is returned then the generated output will be 1 else 0.
Example 2:

Input:
N = 2
arr[] = {3,4}
Possible Answer: 1
Output: 1
Explanation: 4 (at index 1) is the 
peak element as it is greater than 
its only neighbour element 3.
If 1 is returned then the generated output will be 1 else 0.
 

Your Task:
You don't have to read input or print anything. Complete the function peakElement() which takes the array arr[] and 
its size N as input parameters and return the index of any one of its peak elements.

Can you solve the problem in expected time complexity?

 

Expected Time Complexity: O(log N)
Expected Auxiliary Space: O(1)


Constraints:
1 = N = 105
1 = A[] = 106

// arr: input array
// n: size of array
class Solution
{
    public:
    int peakElement(int arr[], int n)
    {
        
        for(int i=0;i<n;i++)
        {
            if(i==0 && arr[i]>=arr[i+1])
            return i;
            if(i==n-1 && arr[i]>=arr[i-1])
            return i;
            if(arr[i]>=arr[i-1] && arr[i]>=arr[i+1])
            return i;
        }
       // Your code here
    }
};

Solution 2:
class Solution
{
    public:
    int peakElement(int arr[], int n)
    {
        int l=0;
        int h=n-1;
        
       while(l<=h){
       int mid=(l+h)/2;
       if( (mid==0 or arr[mid]>=arr[mid-1] ) and (mid==n-1 or arr[mid]>=arr[mid+1] ) )
       return mid;
       
       else if(mid>0 && arr[mid-1]>arr[mid])
       h=mid-1;
       else
       l=mid+1;
       // Your code here
    }
    }
};

Detailed solution:


#include <iostream>
using namespace std;
int peakElement(int * ,int);
int peakElement(int arr[],int size)
{
    int l=0;
    int h=size-1;
    int mid;
    while(l<=h)
    {
        mid=l+(h-l)/2;
        if(mid>0 && mid<size-1)
        {
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1])
            return mid;
           
            else if(arr[mid-1]>arr[mid])
            h=mid-1;
            
            else
            l=mid+1;
        }
        
        else
        {
            if(mid==0){
            if(arr[0]>arr[1])
            return 0;
            else
            return 1;
            }
            
            else if(mid==size-1){
            if(arr[size-1]>arr[size-2])
            return size-1;
            else
            return size-2;
        }
            
        
        }
    }
}

int main()
{
    int arr[]={51,11,2,15,23,6};
    int size=sizeof(arr)/sizeof(arr[0]);
    cout<<peakElement(arr,size)<<endl;
    cout<<"Hello World";

    return 0;
}
