/**
 * when data is replaced
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        
        int zeroCount=0;
        int oneCount=0;
        int twoCount=0;
        
        ListNode *temp = head;
        while(temp!=NULL){
            if(temp->val==0){ zeroCount++; }
            else if(temp->val==1){ oneCount++; }
            else if(temp->val==2){ twoCount++; }
            temp=temp->next;
        }
        
        temp=head;
        while(temp!=NULL){
            if(zeroCount!=0){ temp->val=0; zeroCount--; }            
            else if(oneCount!=0){ temp->val=1; oneCount--; }
            else if(twoCount!=0){ temp->val=2; twoCount--; }
            temp=temp->next;
        }
        
        return head;
    }
};

**********************************************************************************************************************
sort 0s 1s 2s without override values
**********************************************************************************************************************


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    insertAtTail(ListNode *(&tail), ListNode *curr){
        tail->next = curr;
        curr = tail;
    }
    
     // dummy Nodes
     ListNode* sortList(ListNode* head) {
     ListNode *zeroHead = new ListNode(-1);
     ListNode *zeroTail = zeroHead;
        
     ListNode *oneHead = new ListNode(-1);
     ListNode *oneTail = oneHead;
        
     ListNode *twoHead = new ListNode(-1);
     ListNode *twoTail = twoHead;
        
     ListNode *curr = head;
     // create separate list of 0s 1s and 2s   
     while(curr!=NULL){
         int value = curr->data;
         if(value==0){ insertAtTail( zeroTail,curr ); }
         else if(value==1){ insertAtTail( oneTail,curr ); }
         else if(value==2){ insertAtTail( twoTail,curr ); }
         
         curr=curr->next;
     }
    
    // merge list of 0s 1s 2s
    // 1s list is not empty
        
    if(oneHead ->next != NULL){ zeroTail->next = oneHead->next; }
    else { zeroTail->next = twoHead->next; }
        
    oneTail->next = twoHead->next;
    twoTail->next = NULL;    
        
    //setup head
    head = zeroHead -> next;
    
    // delete dummy Nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead;

    return head;
        
    }
};